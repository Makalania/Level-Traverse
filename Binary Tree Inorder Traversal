/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        
        if (root == null) {
            return res;
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode cur = root;
        
        while (!stack.empty() || cur != null) {
            
            while (cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            
            cur = stack.pop();
            res.add(cur.val);
            cur = cur.right;
            
        }
        return res;
        
    }
}





public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        
        if (root == null) {
            return res;
        }
        
        inOrderTraverse(res, root);
        
        return res;
        
    }
    
    private void inOrderTraverse(List<Integer> res, TreeNode root) {
        if (root == null) {
            return;
        }
        
        if (root.left != null) {
            inOrderTraverse(res, root.left);
        }
        
        res.add(root.val);
        
        if (root.right != null) {
            inOrderTraverse(res, root.right);
        }
    }
