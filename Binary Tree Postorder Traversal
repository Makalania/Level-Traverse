/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        
        if (root == null) {
            return res;
        }
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        TreeNode pre = null;

        while (!stack.empty()) {
            TreeNode cur = stack.peek();
            
            if (pre == cur.right && pre != null) {
                res.add(cur.val);
                stack.pop();
            }
            if (pre == cur.left && pre != null) {
                if (cur.right == null) {
                    res.add(cur.val);
                    stack.pop();
                }
                else {
                    stack.push(cur.right);
                }
            }
            
            if (pre == null || pre.left == cur || pre.right == cur) {
                if (cur.left != null) {
                    stack.push(cur.left);
                }
                else if (cur.right != null) {
                    stack.push(cur.right);
                }
                else {
                    res.add(cur.val);
                    stack.pop();
                }
            }
            pre = cur;
        }
        return res;
    }
}



/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        
        postorderTraverse(res, root);

        return res;
    }
    
    private void postorderTraverse(List<Integer> res, TreeNode root) {
        if (root == null) {
            return;
        }
        
        if (root.left != null) {
            postorderTraverse(res, root.left);
        }
        
        if (root.right != null) {
            postorderTraverse(res, root.right);
        }
        
        res.add(root.val);
    }
}
